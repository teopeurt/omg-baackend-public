-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create auth schema (simulating Supabase auth)
CREATE SCHEMA IF NOT EXISTS auth;
CREATE TABLE IF NOT EXISTS auth.users (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    email text UNIQUE,
    raw_user_meta_data jsonb
);

-- Base tables
CREATE TABLE public.profiles (
    id uuid REFERENCES auth.users ON DELETE CASCADE,
    username text UNIQUE NOT NULL,
    avatar_url text,
    latitude double precision,
    longitude double precision,
    last_seen timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    notification_preferences jsonb DEFAULT jsonb_build_object(
        'event_updates', true,
        'messages', true,
        'follows', true,
        'likes', true,
        'comments', true
    ),
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE public.destinations (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    rating numeric NOT NULL CHECK (rating >= 0 AND rating <= 5),
    image text NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE public.events (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title text NOT NULL,
    venue text NOT NULL,
    date timestamp with time zone NOT NULL,
    image text NOT NULL,
    category text NOT NULL,
    price_amount numeric NOT NULL,
    price_currency text NOT NULL,
    is_featured boolean DEFAULT false,
    rating numeric CHECK (rating >= 0 AND rating <= 5),
    description text,
    highlights text[],
    venue_images text[],
    organizer_id uuid REFERENCES public.profiles(id),
    sales_deadline timestamp with time zone,
    available_tickets integer,
    latitude numeric NOT NULL DEFAULT 40.68,
    longitude numeric NOT NULL DEFAULT -73.94,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Social features
CREATE TABLE public.follows (
    follower_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
    following_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    PRIMARY KEY (follower_id, following_id)
);

CREATE TABLE public.posts (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
    content text,
    media_urls text[],
    visibility text CHECK (visibility IN ('public', 'friends', 'private')) DEFAULT 'public',
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Messaging system
CREATE TABLE public.message_threads (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    name text,
    is_group boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE public.messages (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id uuid REFERENCES public.message_threads(id) ON DELETE CASCADE,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    content text NOT NULL,
    status text CHECK (status IN ('sent', 'delivered', 'read')) DEFAULT 'sent',
    media_urls text[],
    is_group_message boolean DEFAULT false,
    is_starred boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Payment system
CREATE TABLE public.payment_methods (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
    type text DEFAULT 'card',
    last4 text NOT NULL,
    exp_month text NOT NULL,
    exp_year text NOT NULL,
    is_default boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

CREATE TABLE public.subscriptions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
    plan_name text NOT NULL,
    status text CHECK (status IN ('active', 'canceled', 'past_due')) DEFAULT 'active',
    current_period_start timestamp with time zone NOT NULL,
    current_period_end timestamp with time zone NOT NULL,
    cancel_at_period_end boolean DEFAULT false,
    payment_method_id uuid REFERENCES public.payment_methods(id),
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE (user_id)
);

-- Helper functions
CREATE OR REPLACE FUNCTION calculate_distance(
    lat1 double precision,
    lon1 double precision,
    lat2 double precision,
    lon2 double precision
)
RETURNS double precision AS $$
DECLARE
    R integer = 6371; -- Earth's radius in kilometers
    dlat double precision;
    dlon double precision;
    a double precision;
    c double precision;
BEGIN
    dlat = radians(lat2 - lat1);
    dlon = radians(lon2 - lon1);
    a = sin(dlat/2) * sin(dlat/2) +
        cos(radians(lat1)) * cos(radians(lat2)) *
        sin(dlon/2) * sin(dlon/2);
    c = 2 * atan2(sqrt(a), sqrt(1-a));
    RETURN R * c;
END;
$$ LANGUAGE plpgsql;

-- Seed data
INSERT INTO auth.users (id, email, raw_user_meta_data)
VALUES 
    ('d290f1ee-6c54-4b01-90e6-d701748f0851', 'test@example.com', '{"username": "testuser", "avatar_url": "https://i.pravatar.cc/150?u=1"}');

INSERT INTO public.profiles (id, username, avatar_url)
VALUES 
    ('d290f1ee-6c54-4b01-90e6-d701748f0851', 'testuser', 'https://i.pravatar.cc/150?u=1');

-- Add seed data for destinations and events
INSERT INTO public.destinations (name, rating, image)
VALUES 
    ('Switzerland', 4.8, 'https://images.unsplash.com/photo-1530122037265-a5f1f91d3b99'),
    ('Australia', 4.6, 'https://images.unsplash.com/photo-1506973035872-a4ec16b8e8d9'),
    ('Ireland', 4.5, 'https://images.unsplash.com/photo-1590089415225-401ed6f9db8e');

INSERT INTO public.events (title, venue, date, image, category, price_amount, price_currency, is_featured, rating)
VALUES 
    ('Camelot', 'Vivian Beaumont Theatre', '2024-04-28', 'https://images.unsplash.com/photo-1514306191717-452ec28c7814', 'Theatre', 45.00, 'USD', true, 4.5),
    ('Hamilton', 'Richard Rodgers Theatre', '2024-04-23', 'https://images.unsplash.com/photo-1583200786218-ccb420258601', 'Musical', 89.00, 'USD', true, 5.0),
    ('Comedy Night', 'Gershwin Theatre', '2024-04-12', 'https://images.unsplash.com/photo-1507676184212-d03ab07a01bf', 'Comedy', 25.00, 'USD', false, 4.2);