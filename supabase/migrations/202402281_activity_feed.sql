-- Add activity feed related tables
CREATE TABLE public.activities (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
    type text CHECK (type IN ('post', 'event_rsvp', 'review', 'follow', 'like', 'comment')),
    data jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add notification preferences
ALTER TABLE public.profiles
ADD COLUMN notification_preferences jsonb DEFAULT jsonb_build_object(
    'event_updates', true,
    'messages', true,
    'follows', true,
    'likes', true,
    'comments', true
);

-- Add RLS policies
ALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can see activities they're allowed to see" ON public.activities
    FOR SELECT USING (
        user_id = auth.uid() OR
        EXISTS (
            SELECT 1 FROM public.follows
            WHERE follower_id = auth.uid() AND following_id = activities.user_id
        )
    );

-- Create indexes
CREATE INDEX idx_activities_user_id ON public.activities(user_id);
CREATE INDEX idx_activities_created_at ON public.activities(created_at DESC);
CREATE INDEX idx_activities_type ON public.activities(type);

-- Function to create activity
CREATE OR REPLACE FUNCTION public.create_activity()
RETURNS trigger AS $$
BEGIN
    INSERT INTO public.activities (user_id, type, data)
    VALUES (
        NEW.user_id,
        TG_ARGV[0],
        jsonb_build_object(
            'id', NEW.id,
            'content', CASE 
                WHEN TG_TABLE_NAME = 'posts' THEN NEW.content
                WHEN TG_TABLE_NAME = 'comments' THEN NEW.content
                ELSE NULL
            END
        )
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create triggers for different activities
CREATE TRIGGER on_new_post_activity
    AFTER INSERT ON public.posts
    FOR EACH ROW
    EXECUTE FUNCTION public.create_activity('post');

CREATE TRIGGER on_new_comment_activity
    AFTER INSERT ON public.comments
    FOR EACH ROW
    EXECUTE FUNCTION public.create_activity('comment');

-- Seed initial activity data
INSERT INTO public.activities (user_id, type, data)
SELECT 
    user_id,
    'post',
    jsonb_build_object(
        'id', id,
        'content', content
    )
FROM public.posts;